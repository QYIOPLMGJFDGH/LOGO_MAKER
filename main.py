import os
import logging
import tempfile
from PIL import Image, ImageDraw, ImageFont, ImageColor, ImageFilter
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery, InputMediaPhoto
from config import Config

# рд▓реЙрдЧрд┐рдВрдЧ рд╕реЗрдЯрдЕрдк
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# рдпреВрдЬрд░ рдбреЗрдЯрд╛ рд╕реНрдЯреЛрд░
user_data_store = {}

# рдлреЙрдиреНрдЯ рд╕рд╛рдЗрдЬрд╝ рдХреЛ рдбрд╛рдпрдиреЗрдорд┐рдХрд▓реА рдПрдбрдЬрд╕реНрдЯ рдХрд░рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди
def get_dynamic_font(image, text, max_width, max_height, font_path):
    draw = ImageDraw.Draw(image)
    font_size = 100
    while font_size > 10:
        font = ImageFont.truetype(font_path, font_size)
        text_width, text_height = draw.textsize(text, font=font)
        if text_width <= max_width and text_height <= max_height:
            return font
        font_size -= 5
    return font

# рдЗрдореЗрдЬ рдПрдбрдЬрд╕реНрдЯрдореЗрдВрдЯ рдХреЗ рд▓рд┐рдП рдХреАрдмреЛрд░реНрдб рдмрдирд╛рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди
def get_adjustment_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("тмЕя╕П Left", callback_data="move_left"),
         InlineKeyboardButton("тЮбя╕П Right", callback_data="move_right")],
        [InlineKeyboardButton("тмЖя╕П Up", callback_data="move_up"),
         InlineKeyboardButton("тмЗя╕П Down", callback_data="move_down")],
        [InlineKeyboardButton("ЁЯФН Increase", callback_data="increase_size"),
         InlineKeyboardButton("ЁЯФО Decrease", callback_data="decrease_size")],
        
        # рд░рдВрдЧ рдЪрдпрди рдмрдЯрди
        [InlineKeyboardButton("ЁЯФ┤ Red", callback_data="color_red"),
         InlineKeyboardButton("ЁЯФ╡ Blue", callback_data="color_blue"),
         InlineKeyboardButton("ЁЯЯв Green", callback_data="color_green"),
         InlineKeyboardButton("тЪл Black", callback_data="color_black"),
         InlineKeyboardButton("ЁЯЯб Yellow", callback_data="color_yellow"),
         InlineKeyboardButton("ЁЯЯа Orange", callback_data="color_orange"),
         InlineKeyboardButton("ЁЯЯг Purple", callback_data="color_purple")],
        
        # рдлреЙрдиреНрдЯ рдЪрдпрди рдмрдЯрди
        [InlineKeyboardButton("Deadly Advance Italic", callback_data="font_deadly_advance_italic"),
         InlineKeyboardButton("Deadly Advance", callback_data="font_deadly_advance"),
         InlineKeyboardButton("Trick or Treats", callback_data="font_trick_or_treats"),
         InlineKeyboardButton("Vampire Wars Italic", callback_data="font_vampire_wars_italic"),
         InlineKeyboardButton("Lobster", callback_data="font_lobster")],
        
        # рдмреНрд▓рд░ рдмрдЯрди
        [InlineKeyboardButton("Blur+", callback_data="blur_plus"),
         InlineKeyboardButton("Blur-", callback_data="blur_minus")]
    ])

# рдЗрдореЗрдЬ рдкрд░ рдЯреЗрдХреНрд╕реНрдЯ рдЬреЛрдбрд╝рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди
async def add_text_to_image(photo_path, text, output_path, font_path, text_position, size_multiplier, text_color):
    try:
        user_image = Image.open(photo_path).convert("RGBA")
        max_width, max_height = user_image.size

        # рдлреЙрдиреНрдЯ рд╕рд╛рдЗрдЬрд╝ рдХреЛ рд╕рд╛рдЗрдЬ рдорд▓реНрдЯреАрдкреНрд▓рд╛рдпрд░ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдПрдбрдЬрд╕реНрдЯ рдХрд░реЗрдВ
        font = get_dynamic_font(user_image, text, max_width, max_height, font_path)
        font = ImageFont.truetype(font_path, int(font.size * size_multiplier))
        
        draw = ImageDraw.Draw(user_image)
        text_width, text_height = draw.textsize(text, font=font)
        
        # рдЯреЗрдХреНрд╕реНрдЯ рдХреА рдкреЛрдЬреАрд╢рди рдХреЛ рд▓рд╛рдЧреВ рдХрд░реЗрдВ
        x = text_position[0]
        y = text_position[1]

        # рдЯреЗрдХреНрд╕реНрдЯ рдХрд╛ рдЖрдЙрдЯрд▓рд╛рдЗрди (рд╢реИрдбреЛ рдЗрдлреЗрдХреНрдЯ)
        outline_width = 3
        for dx in [-outline_width, outline_width]:
            for dy in [-outline_width, outline_width]:
                draw.text((x + dx, y + dy), text, font=font, fill="white")

        # рдЯреЗрдХреНрд╕реНрдЯ рдХрд╛ рдореБрдЦреНрдп рд░рдВрдЧ
        draw.text((x, y), text, font=font, fill=text_color)

        # рдЗрдореЗрдЬ рдХреЛ рдЯреЗрдореНрдкрд░реЗрд░реА рдлрд╛рдЗрд▓ рдореЗрдВ рд╕реЗрд╡ рдХрд░реЗрдВ
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as temp_file:
            output_path = temp_file.name
            user_image.save(output_path, "PNG")
        
        return output_path, text_width, text_height
    except Exception as e:
        logger.error(f"Error adding text to image: {e}")
        return None, 0, 0

# рдмреИрдХрдЧреНрд░рд╛рдЙрдВрдб рдЗрдореЗрдЬ рдкрд░ рдмреНрд▓рд░ рдЗрдлреЗрдХреНрдЯ рд▓рд╛рдЧреВ рдХрд░рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди (рдЯреЗрдХреНрд╕реНрдЯ рдкрд░ рдирд╣реАрдВ)
async def apply_blur(photo_path, blur_intensity, text_position, text_size):
    try:
        image = Image.open(photo_path).convert("RGBA")
        image_copy = image.copy()

        # рдорд╛рд╕реНрдХ рдмрдирд╛рдПрдВ рдЬрд┐рд╕рдореЗрдВ рдЯреЗрдХреНрд╕реНрдЯ рдХрд╛ рдХреНрд╖реЗрддреНрд░ рди рджрд┐рдЦрд╛рдИ рджреЗ
        mask = Image.new("L", image.size, 255)
        draw = ImageDraw.Draw(mask)

        # рдЯреЗрдХреНрд╕реНрдЯ рдХреЗ рдХреНрд╖реЗрддреНрд░ рдХреЛ рдорд╛рд╕реНрдХ рдкрд░ рдбреНрд░рд╛ рдХрд░реЗрдВ рддрд╛рдХрд┐ рдмреНрд▓рд░ рдЙрд╕ рдХреНрд╖реЗрддреНрд░ рдХреЛ рди рдЫреБрдП
        text_width, text_height = text_size
        x, y = text_position

        # рдЯреЗрдХреНрд╕реНрдЯ рдХрд╛ рдХреНрд╖реЗрддреНрд░ рдорд╛рд╕реНрдХ рдкрд░ (0 рд╕реЗ рдорддрд▓рдм рд╣реИ рдХрд┐ рдпрд╣рд╛рдВ рдмреНрд▓рд░ рдирд╣реАрдВ рд╣реЛрдЧрд╛)
        draw.rectangle([x, y, x + text_width, y + text_height], fill=0)  # 0 = рдХреЛрдИ рдмреНрд▓рд░ рдирд╣реАрдВ

        # рдЗрдореЗрдЬ рдкрд░ рдЧреЙрд╕рд┐рдпрди рдмреНрд▓рд░ рд▓рд╛рдЧреВ рдХрд░реЗрдВ
        blurred_image = image_copy.filter(ImageFilter.GaussianBlur(radius=blur_intensity))
        
        # рдореВрд▓ рдЗрдореЗрдЬ (рдЯреЗрдХреНрд╕реНрдЯ рд╡рд╛рд▓рд╛ рд╣рд┐рд╕реНрд╕рд╛) рдХреЛ рдмреНрд▓рд░реНрдб рдЗрдореЗрдЬ рдкрд░ рдЪрд┐рдкрдХрд╛рдПрдВ
        image_copy.paste(image, (0, 0), mask)

        # рдорд╛рд╕реНрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддреЗ рд╣реБрдП рдмреНрд▓рд░ рдФрд░ рдУрд░рд┐рдЬрд┐рдирд▓ рдЗрдореЗрдЬ рдХреЛ рдорд░реНрдЬ рдХрд░реЗрдВ
        result_image = Image.composite(blurred_image, image_copy, mask)

        # рдЕрдВрддрд┐рдо рдЗрдореЗрдЬ рдХреЛ рд╕реЗрд╡ рдХрд░реЗрдВ
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as temp_file:
            output_path = temp_file.name
            result_image.save(output_path, "PNG")
        
        return output_path
    except Exception as e:
        logger.error(f"Error applying blur: {e}")
        return None

# рдпреВрдЬрд░ рдбреЗрдЯрд╛ рдХреЛ рд╕реЗрд╡ рдХрд░рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди
async def save_user_data(user_id, data):
    user_data_store[user_id] = data
    logger.info(f"User {user_id} data saved: {data}")

# рдпреВрдЬрд░ рдбреЗрдЯрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди
async def get_user_data(user_id):
    return user_data_store.get(user_id, None)

# рдмреЛрдЯ рдХреА рд╢реБрд░реБрдЖрдд
session_name = "logo_creator_bot"
app = Client(
    session_name,
    bot_token=Config.BOT_TOKEN,
    api_id=Config.API_ID,
    api_hash=Config.API_HASH,
    workdir=os.getcwd()
)

@app.on_message(filters.command("start"))
async def start_command(_, message: Message) -> None:
    welcome_text = (
        "ЁЯСЛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ рдЖрдкрдХреЗ рд▓реЛрдЧреЛ рдХреНрд░рд┐рдПрдЯрд░ рдмреЛрдЯ рдореЗрдВ!\n\n"
        "рдЗрд╕ рдмреЛрдЯ рдХреЗ рджреНрд╡рд╛рд░рд╛ рдЖрдк рдПрдХ рдХрд╕реНрдЯрдо рд▓реЛрдЧреЛ рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВ, рдмрд╕ рдлреЛрдЯреЛ рднреЗрдЬреЗрдВ рдФрд░ рдЯреЗрдХреНрд╕реНрдЯ рдЬреЛрдбрд╝реЗрдВ!\n"
    )
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("Join ЁЯСЛ", url="https://t.me/BABY09_WORLD")]])
    await message.reply_text(welcome_text, reply_markup=keyboard, disable_web_page_preview=True)

@app.on_message(filters.photo & filters.private)
async def photo_handler(_, message: Message) -> None:
    media = message
    file_size = media.photo.file_size if media.photo else 0
    if file_size > 200 * 1024 * 1024:
        return await message.reply_text("рдХреГрдкрдпрд╛ 200MB рд╕реЗ рдХрдо рдЖрдХрд╛рд░ рдХреА рдлреЛрдЯреЛ рднреЗрдЬреЗрдВред")
    try:
        text = await message.reply("рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ...")
        local_path = await media.download()
        await text.edit_text("рдЖрдкрдХреЗ рд▓реЛрдЧреЛ рдХреЛ рдкреНрд░реЛрд╕реЗрд╕ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...")
        await save_user_data(message.from_user.id, {'photo_path': local_path, 'text': '', 'text_position': (0, 0), 'size_multiplier': 1, 'text_color': 'red', 'font': 'fonts/Deadly Advance.ttf', 'blur_intensity': 0})
        await message.reply_text("рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд▓реЛрдЧреЛ рдЯреЗрдХреНрд╕реНрдЯ рднреЗрдЬреЗрдВред")
    except Exception as e:
        logger.error(e)
        await text.edit_text("рдлрд╛рдЗрд▓ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред")

@app.on_message(filters.text & filters.private)
async def text_handler(_, message: Message) -> None:
    user_id = message.from_user.id
    user_data = await get_user_data(user_id)

    if not user_data:
        await message.reply_text("рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рдПрдХ рдлреЛрдЯреЛ рднреЗрдЬреЗрдВред")
        return
    
    if user_data['text']:
        await message.reply_text("рдЖрдк рдкрд╣рд▓реЗ рд╣реА рд▓реЛрдЧреЛ рдХреЗ рд▓рд┐рдП рдЯреЗрдХреНрд╕реНрдЯ рднреЗрдЬ рдЪреБрдХреЗ рд╣реИрдВред рдкреЛрдЬреАрд╢рди рдПрдбрдЬрд╕реНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреАрдмреЛрд░реНрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред")
        return
    
    text = message.text
    user_data['text'] = text
    await save_user_data(user_id, user_data)
    
    # рдЯреЗрдХреНрд╕реНрдЯ рдФрд░ рдлреЛрдЯреЛ рдХреЛ рдЬреЛрдбрд╝рдиреЗ рдФрд░ рдлреЙрдиреНрдЯ рдкреЛрдЬреАрд╢рди рддрдп рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж рдЕрдВрддрд┐рдо рд▓реЛрдЧреЛ рдмрдирд╛рдирд╛
    font_path = user_data.get("font", "fonts/Deadly Advance.ttf")
    output_path, text_width, text_height = await add_text_to_image(user_data['photo_path'], user_data['text'], None, font_path, user_data['text_position'], user_data['size_multiplier'], ImageColor.getrgb(user_data['text_color']))

    # рдмреНрд▓рд░ рдЕрдкреНрд▓рд╛рдИ рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж рдЖрдЙрдЯрдкреБрдЯ рднреЗрдЬрдирд╛
    output_path = await apply_blur(output_path, user_data['blur_intensity'], user_data['text_position'], (text_width, text_height))
    
    if output_path:
        await message.reply_photo(photo=output_path, caption="рдпрд╣ рд░рд╣рд╛ рдЖрдкрдХрд╛ рд▓реЛрдЧреЛ!")
    else:
        await message.reply_text("рд▓реЛрдЧреЛ рдмрдирд╛рддреЗ рд╕рдордп рд╕рдорд╕реНрдпрд╛ рд╣реБрдИред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")

# рдХреЙрд▓рдмреИрдХ рд╣реИрдВрдбрд▓рд░ (рдХреАрдмреЛрд░реНрдб рдмрдЯрди рдХреЗ рд▓рд┐рдП)
@app.on_callback_query()
async def callback_handler(_, callback_query: CallbackQuery) -> None:
    user_id = callback_query.from_user.id
    user_data = await get_user_data(user_id)
    
    if callback_query.data in ["blur_plus", "blur_minus"]:
        blur_intensity_change = 1 if callback_query.data == "blur_plus" else -1
        user_data['blur_intensity'] = max(min(user_data['blur_intensity'] + blur_intensity_change, 10), 0)
        await save_user_data(user_id, user_data)

        font_path = user_data.get("font", "fonts/Deadly Advance.ttf")
        output_path, text_width, text_height = await add_text_to_image(user_data['photo_path'], user_data['text'], None, font_path, user_data['text_position'], user_data['size_multiplier'], ImageColor.getrgb(user_data['text_color']))
        
        if output_path is None:
            await callback_query.message.reply_text("рд▓реЛрдЧреЛ рдмрдирд╛рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рдЖрдИред")
            return
        
        # рдмреНрд▓рд░ рдХреЛ рдмреИрдХрдЧреНрд░рд╛рдЙрдВрдб рдЗрдореЗрдЬ рдкрд░ рд▓рд╛рдЧреВ рдХрд░рдирд╛
        output_path = await apply_blur(output_path, user_data['blur_intensity'], user_data['text_position'], (text_width, text_height))

        # рдирдП рд▓реЛрдЧреЛ рдХреЗ рд╕рд╛рде рдХреАрдмреЛрд░реНрдб рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ
        await callback_query.message.edit_media(InputMediaPhoto(media=output_path, caption="рдпрд╣ рд░рд╣рд╛ рдЖрдкрдХрд╛ рд▓реЛрдЧреЛ!"), reply_markup=get_adjustment_keyboard())
    await callback_query.answer()

if __name__ == "__main__":
    app.run()
        
