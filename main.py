import os
import logging
import cv2
import numpy as np
from pyrogram import Client, filters
from pyrogram.types import Message
from PIL import Image, ImageEnhance, ImageFilter
from config import Config  # ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ ‡§Ø‡§π ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó ‡§´‡§º‡§æ‡§á‡§≤ ‡§π‡•à
from pyrogram.errors import SessionRevoked

# ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§ï‡§∞‡•á‡§Ç
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‡§¨‡•ã‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§Ø‡§æ ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ
def create_client(session_name):
    return Client(
        session_name,
        bot_token=Config.BOT_TOKEN,
        api_id=Config.API_ID,
        api_hash=Config.API_HASH,
    )

# ‡§á‡§Æ‡•á‡§ú ‡§ï‡•Ä ‡§∂‡§æ‡§∞‡•ç‡§™‡§®‡•á‡§∏ ‡§ö‡•á‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®
def is_image_sharp(image_path):
    """ ‡§á‡§Æ‡•á‡§ú ‡§ï‡•Ä ‡§∂‡§æ‡§∞‡•ç‡§™‡§®‡•á‡§∏ ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§ """
    image = cv2.imread(image_path)
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    laplacian_var = cv2.Laplacian(gray_image, cv2.CV_64F).var()
    
    # ‡§Ø‡§¶‡§ø ‡§∂‡§æ‡§∞‡•ç‡§™‡§®‡•á‡§∏ ‡§ï‡§Æ ‡§π‡•ã ‡§§‡•ã ‡§á‡§Æ‡•á‡§ú ‡§ñ‡§∞‡§æ‡§¨ ‡§π‡•à (‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§µ‡•à‡§∞‡§ø‡§è‡§Ç‡§∏ ‡§Æ‡§§‡§≤‡§¨ ‡§∂‡§æ‡§∞‡•ç‡§™ ‡§á‡§Æ‡•á‡§ú)
    if laplacian_var < 100:
        return False  # ‡§á‡§Æ‡•á‡§ú ‡§¨‡§π‡•Å‡§§ ‡§ß‡•Å‡§Ç‡§ß‡§≤‡•Ä ‡§π‡•à
    return True

# ‡§á‡§Æ‡•á‡§ú ‡§ï‡•ã ‡§∏‡•Å‡§ß‡§æ‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®
def enhance_image(input_image_path, output_image_path):
    try:
        # ‡§™‡§ø‡§≤‡•ã (Pillow) ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§á‡§Æ‡•á‡§ú ‡§ñ‡•ã‡§≤‡•á‡§Ç
        img = Image.open(input_image_path)

        # 1. ‡§ï‡§Ç‡§ü‡•ç‡§∞‡§æ‡§∏‡•ç‡§ü ‡§∏‡•Å‡§ß‡§æ‡§∞‡•á‡§Ç (‡§π‡§≤‡•ç‡§ï‡§æ ‡§ï‡§Ç‡§ü‡•ç‡§∞‡§æ‡§∏‡•ç‡§ü)
        enhancer = ImageEnhance.Contrast(img)
        img = enhancer.enhance(1.2)  # ‡§ï‡§Ç‡§ü‡•ç‡§∞‡§æ‡§∏‡•ç‡§ü ‡§π‡§≤‡•ç‡§ï‡§æ ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç

        # 2. ‡§¨‡•ç‡§∞‡§æ‡§á‡§ü‡§®‡•á‡§∏ ‡§∏‡•Å‡§ß‡§æ‡§∞‡•á‡§Ç (‡§π‡§≤‡•ç‡§ï‡•Ä ‡§¨‡•ç‡§∞‡§æ‡§á‡§ü‡§®‡•á‡§∏)
        enhancer = ImageEnhance.Brightness(img)
        img = enhancer.enhance(1.1)  # ‡§¨‡•ç‡§∞‡§æ‡§á‡§ü‡§®‡•á‡§∏ ‡§π‡§≤‡•ç‡§ï‡§æ ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç

        # 3. ‡§∂‡§æ‡§∞‡•ç‡§™‡§®‡•á‡§∏ ‡§∏‡•Å‡§ß‡§æ‡§∞‡•á‡§Ç (‡§π‡§≤‡•ç‡§ï‡•Ä ‡§∂‡§æ‡§∞‡•ç‡§™‡§®‡•á‡§∏)
        enhancer = ImageEnhance.Sharpness(img)
        img = enhancer.enhance(1.7)  # ‡§∂‡§æ‡§∞‡•ç‡§™‡§®‡•á‡§∏ ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç, ‡§≤‡•á‡§ï‡§ø‡§® ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§®‡§π‡•Ä‡§Ç

        # 4. ‡§ï‡§≤‡§∞ ‡§∏‡•à‡§ö‡•Å‡§∞‡•á‡§∂‡§® ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç (‡§π‡§≤‡•ç‡§ï‡§æ ‡§∏‡•à‡§ö‡•Å‡§∞‡•á‡§∂‡§®)
        enhancer = ImageEnhance.Color(img)
        img = enhancer.enhance(1.4)  # ‡§ï‡§≤‡§∞ ‡§∏‡•à‡§ö‡•Å‡§∞‡•á‡§∂‡§® ‡§π‡§≤‡•ç‡§ï‡§æ ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç

        # ‡§á‡§Æ‡•á‡§ú ‡§ï‡•ã ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç
        img.save(output_image_path)

        # OpenCV ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§á‡§Æ‡•á‡§ú ‡§ï‡•ã ‡§î‡§∞ ‡§∏‡•Å‡§ß‡§æ‡§∞‡•á‡§Ç
        return apply_opencv_enhancements(output_image_path)
    
    except Exception as e:
        logger.error(f"‡§á‡§Æ‡•á‡§ú ‡§∏‡•Å‡§ß‡§æ‡§∞‡§§‡•á ‡§µ‡§ï‡•ç‡§§ ‡§è‡§∞‡§∞: {str(e)}")
        return None

def apply_opencv_enhancements(image_path):
    """OpenCV ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§°‡•Ä‡§®‡•â‡§á‡§ú‡§º‡§ø‡§Ç‡§ó, ‡§ï‡§æ‡§Ç‡§ü‡•ç‡§∞‡§æ‡§∏‡•ç‡§ü ‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§ö‡§ø‡§Ç‡§ó, ‡§î‡§∞ ‡§è‡§ú ‡§∂‡§æ‡§∞‡•ç‡§™‡§®‡§ø‡§Ç‡§ó‡•§"""
    # OpenCV ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§á‡§Æ‡•á‡§ú ‡§ï‡•ã ‡§™‡§¢‡§º‡•á‡§Ç
    image = cv2.imread(image_path)

    # 1. ‡§°‡•Ä‡§®‡•â‡§á‡§ú‡§º‡§ø‡§Ç‡§ó (‡§∂‡•ã‡§∞ ‡§ï‡•ã ‡§ï‡§Æ ‡§ï‡§∞‡§®‡§æ)
    denoised_image = cv2.fastNlMeansDenoisingColored(image, None, 10, 10, 7, 21)

    # 2. ‡§ï‡§æ‡§Ç‡§ü‡•ç‡§∞‡§æ‡§∏‡•ç‡§ü ‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§ö‡§ø‡§Ç‡§ó (‡§ï‡§æ‡§Ç‡§ü‡•ç‡§∞‡§æ‡§∏‡•ç‡§ü ‡§ï‡•ã ‡§ë‡§ü‡•ã ‡§è‡§°‡§ú‡§∏‡•ç‡§ü ‡§ï‡§∞‡§®‡§æ)
    lab = cv2.cvtColor(denoised_image, cv2.COLOR_BGR2Lab)
    l, a, b = cv2.split(lab)
    l = cv2.equalizeHist(l)  # L ‡§ö‡•à‡§®‡§≤ (‡§≤‡•ç‡§Ø‡•Ç‡§Æ‡§ø‡§®‡•á‡§Ç‡§∏) ‡§™‡§∞ ‡§π‡§ø‡§∏‡•ç‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§¨‡§∞‡§æ‡§¨‡§∞ ‡§ï‡§∞‡•á‡§Ç
    lab = cv2.merge((l, a, b))
    contrast_stretched_image = cv2.cvtColor(lab, cv2.COLOR_Lab2BGR)

    # 3. ‡§è‡§ú ‡§∂‡§æ‡§∞‡•ç‡§™‡§®‡§ø‡§Ç‡§ó (‡§è‡§ï ‡§ï‡§∞‡•ç‡§®‡§≤ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡§æ)
    kernel = np.array([[-1, -1, -1], [-1, 9, -1], [-1, -1, -1]])  # ‡§∂‡§æ‡§∞‡•ç‡§™‡§®‡§ø‡§Ç‡§ó ‡§ï‡§∞‡•ç‡§®‡§≤
    sharpened_image = cv2.filter2D(contrast_stretched_image, -1, kernel)

    # ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§á‡§Æ‡•á‡§ú ‡§ï‡•ã ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç
    enhanced_image_path = "enhanced_" + os.path.basename(image_path)
    cv2.imwrite(enhanced_image_path, sharpened_image)

    return enhanced_image_path

# ‡§Ö‡§¨ ‡§¨‡•ã‡§ü ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§ï‡•ã ‡§°‡§ø‡§´‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç
app = create_client("photo_enhancer_session")

@app.on_message(filters.command("start"))
async def start_command(_, message: Message) -> None:
    """‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂ ‡§¶‡•á‡§Ç‡•§"""
    welcome_text = (
        "üëã Welcome to the Image Enhancer Bot!\n\n"
        "Send me a photo, and I'll enhance it using AI!"
    )

    await message.reply_text(welcome_text, disable_web_page_preview=True)

@app.on_message(filters.photo & filters.incoming & filters.private)
async def photo_handler(_, message: Message) -> None:
    """‡§Ü‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç, ‡§â‡§∏‡•á ‡§∏‡•Å‡§ß‡§æ‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§≠‡•á‡§ú‡•á‡§Ç‡•§"""
    media = message
    file_size = media.photo.file_size if media.photo else 0

    # ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§á‡§Æ‡•á‡§ú ‡§¨‡§π‡•Å‡§§ ‡§¨‡§°‡§º‡•Ä ‡§§‡•ã ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à (‡§Æ‡•à‡§ï‡•ç‡§∏ 200MB)
    if file_size > 200 * 1024 * 1024:
        return await message.reply_text("Please provide a photo under 200MB.")

    try:
        # ‡§´‡•ã‡§ü‡•ã ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§π‡•ã‡§®‡•á ‡§ï‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç
        text = await message.reply("Processing...")

        # ‡§á‡§Æ‡•á‡§ú ‡§ï‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
        local_path = await media.download()

        # ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§á‡§Æ‡•á‡§ú ‡§∂‡§æ‡§∞‡•ç‡§™ ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç
        if not is_image_sharp(local_path):
            await text.edit_text("This image seems blurry or of low quality. Please send a better one.")
            os.remove(local_path)
            return

        # ‡§∏‡•Å‡§ß‡§æ‡§∞‡§ø‡§§ ‡§á‡§Æ‡•á‡§ú ‡§ï‡§æ ‡§™‡§• ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        enhanced_image_path = "enhanced_" + os.path.basename(local_path)

        # ‡§á‡§Æ‡•á‡§ú ‡§ï‡•ã ‡§∏‡•Å‡§ß‡§æ‡§∞‡•á‡§Ç
        enhanced_image = enhance_image(local_path, enhanced_image_path)

        if enhanced_image:
            await text.edit_text("Sending enhanced image...")
            # ‡§∏‡•Å‡§ß‡§æ‡§∞‡§ø‡§§ ‡§á‡§Æ‡•á‡§ú ‡§ï‡•ã ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§≠‡•á‡§ú‡•á‡§Ç
            await message.reply_photo(enhanced_image)
        else:
            await text.edit_text("Error enhancing the image. Please try again later.")

        # ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ì‡§∞‡§ø‡§ú‡§ø‡§®‡§≤ ‡§î‡§∞ ‡§∏‡•Å‡§ß‡§æ‡§∞‡§ø‡§§ ‡§á‡§Æ‡•á‡§ú ‡§ï‡•ã ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç
        os.remove(local_path)
        os.remove(enhanced_image_path)

    except Exception as e:
        logger.error(f"‡§´‡•ã‡§ü‡•ã ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ ‡§Æ‡•á‡§Ç ‡§è‡§∞‡§∞: {str(e)}")
        await text.edit_text("‡§ï‡•Å‡§õ ‡§ó‡§°‡§º‡§¨‡§°‡§º ‡§π‡•ã ‡§ó‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§")
        if os.path.exists(local_path):
            os.remove(local_path)  # ‡§Ö‡§ó‡§∞ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§§‡•ã ‡§á‡§Æ‡•á‡§ú ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç

if __name__ == "__main__":
    try:
        # ‡§¨‡•ã‡§ü ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§Ø‡§æ ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§¨‡§®‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§â‡§∏‡•á ‡§∞‡§® ‡§ï‡§∞‡•á‡§Ç
        app.run()
    except SessionRevoked:
        logger.error("‡§∏‡§§‡•ç‡§∞ ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡•ã‡§ü ‡§ï‡•ã ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç‡•§")
    except Exception as e:
        logger.error(f"‡§ï‡•Å‡§õ ‡§ó‡§°‡§º‡§¨‡§°‡§º ‡§π‡•ã ‡§ó‡§à: {e}")
